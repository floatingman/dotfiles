#!/usr/bin/env python
 
# A script to parse the MPD database into a list of dictionaries (or at least, it was going to be before I decided to finish it).
# Now with patronising comments which assume almost no Python knowledge!
 
# cPickle is a faster version of the pickle library. It is used to save data structures to a file. Like lists and dictionaries. os is needed for file stuff, sys for arguments, and re for regex.
import cPickle, os, sys, re
 
# Info about new playlists
newname = ""
newrules = []
 
# Place to look for the MPD database and config files, and the loaded MPD config (well, only the values useful to us).
confpath = "/etc/mpd.conf"
mpd = {"music_directory" : "", "playlist_directory" : "", "db_file" : "", "user" : ""}
 
# There is an environmental variable XDG_CACHE_HOME which specifies where to save cache files. However, if not set, a default of ~/.cache should be used.
cachehome = os.path.expanduser(os.environ['XDG_CACHE_HOME'])
if cachehome == "":
    cachehome = os.environ['HOME'] + "/.cache"
cachepath = cachehome + "/mpdspl/mpddb.cache"
 
# $XDG_DATA_HOME specifies where to save data files. Like a record of playlists which have been created. If unset a default of ~/.local/share should be used. This is currently unused as there is no actual creation of playlists yet :p
datahome = os.path.expanduser(os.environ['XDG_DATA_HOME'])
if datahome == "":
    datahome = os.environ['HOME'] + "/.local/share/"
datapath = datahome + "/mpdspl"
# If the data directory does not exist, create it.
if not os.path.isdir(datapath):
    os.mkdir(datapath)
 
tracks = []
forceupdate = False
simpleoutput = False
 
# A nice little help function. Read on to see how it is called...
def showhelp():
    print "Usage: mpdspl [options]\n"
    print "A script to generate smart playlists for MPD.\n"
    print "Options:"
    print " -f, --force - Force an update of the cache file and any playlists."
    print " -dFILE, --dbpath=FILE - Location of the database file."
    print " -cFILE, --cachepath=FILE - Location of the cache file."
    print " -CFILE, --confpath=FILE - Location of the MPD config file."
    print " -pPATH, --playlists=PATH - Location of the MPD playlist files."
    print " -uUSER, --mpduser=USER - Username that MPD runs as."
    print " -n, --new [name] [rules] - Create a new playlist."
    print " -s, --simple - (used with -n) Only print the final track list (with paths relative to the MPD root dir) to STDOUT."
    print " -h, --help - Display this text and exit.\n"
    print " The values for -d and -u will be determined from the MPD config file is not specified."
    print " The value for -c is assumed to be $XDG_CACHE_HOME/mpdspl/mpddb.cache."
    print " The value for -C is assumed to be /etc/mpd.conf.\n"
    print "Playlist rules:"
    print " These are specified as a string of Python-compatible regular expressions separated by keywords, spaces, and slashes."
    print " They are matched by re.search, not re.match, and no special flags are passed, other than re.IGNORECASE when requested.\n"
    print " These keywords are:"
    print " ar = Artist"
    print " al = Album"
    print " ti = Title"
    print " tn = Track Number"
    print " ge = Genre"
    print " ye = Year"
    print " le = Length (seconds)"
    print " fp = File Path (relative to MPD root dir, including filename)"
    print " fn = File Name\n"
    print " Regular expressions are specified within slashes (/regex/)."
    print " If the first slash is preceeded by an 'i', the regular expression is interpreted as case-insensitive."
    print " If the final slash is succeeded by a 'n', the result of the match is negated.\n"
    print " For example, a rule for all tracks by 'Fred' or 'George', which have a title containing (case insensitive) 'The' and 'and', but not 'when' would be:"
    print " ar=/(Fred|George)/ ti=i/(the.*and|and.*the)/ ti=i/when/n\n"
    print "Notes:"
    print " Paths specified in the MPD config file containing a '~' will have the '~'s replaced by the user MPD runs as."
    print " If the user is not specified in the MPD config file, or by the -u parameter, it is assumed the user is root."
    print " Back and forward slashes must be escaped in playlist rules (except things like \d, obviously).\n"
    sys.exit()
 
# Parse the rules regex
def parserules(rulestr):
    # rules will be our list of rules, bufferstr will be the buffer for our parser, i will be a counter, and inregex will be to stop silly things happening
    rules = []
    bufferstr = ""
    i = 0
    inregex = False
    
    # We want to use the same identifiers as the track dictionaries:
    keywords = {"ar" : "Artist", "al" : "Album", "ti" : "Title", "tn" : "Track", "ge" : "Genre", "ye" : "Date", "le" : "Time", "fp" : "file", "fn" : "key"}
 
    # For every character in rulestr (we do it characterwise, hence needing a buffer)
    for c in rulestr:
        # Add the character to the buffer
        bufferstr += c
 
        # If set to 'n' and the previous regex has been set, negate it.
        if bufferstr == "n" and not rules[i - 1]["regex"] == "" and not inregex:
            bufferstr = ""
            rules[i - 1]["negate"] = True
        # If the buffer matches one of our keywords, we have hit a new rule, and so create a blank dictionary, and clear the buffer.
        elif bufferstr.strip().lower() in ["ar", "al", "ti", "tn", "ge", "ye", "le", "fp", "fn"] and not inregex:
            rules.append({"type" : keywords[bufferstr.strip()], "regex" : "", "compiled" : None, "inverse" : False, "negate" : False})
            bufferstr = ""
        # If we're at the start of a blank case-insensitive regex, record that, and clear the buffer.
        elif bufferstr == "=i/":
            rules[i]["i"] = True
            inregex = True
            bufferstr = ""
        # If not, just clear the buffer for the coming regex.
        elif bufferstr == "=/":
            inregex = True
            bufferstr = ""
        # If at the end of a regex, stick it all (sans the trailing slash, they're just a nice separater for our parser) to the dictionary, increment the counter, and clear the buffer ready for the next rule.
        elif bufferstr[-1] == "/" and not bufferstr[-2] == "\\":
            inregex = False
            rules[i]["regex"] = bufferstr[:-1]
            bufferstr = ""
            i += 1
        # Get rid of the escape backslash if a forward slash has been used.
        elif bufferstr[-1] == "/" and not bufferstr[-2] == "\\":
            bufferstr[-2] = ""
 
    # This isn't needed. But it makes things faster and allows us to have case insensetivity.
    for rule in rules:
        regex = None
        if rule["inverse"]:
            # If case insensitive, compile it as such.
            regex = re.compile(rule["regex"], re.IGNORECASE)
        else:
            regex = re.compile(rule["regex"])
 
        # Overwrite the regex string with the compiled object
        rule["compiled"] = regex
 
    return rules
 
# Splitting things up into functions is good :D
def parseargs():
    # global lets us access variables specified outside our function.
    global forceupdate
    global mpd
    global confpath
    global cachepath
    global newname
    global newrules
    global simpleoutput
    
    newarg = 0
    
    for argument in sys.argv:
        if not newarg == 0:
            # We're making a new playlist. If we're only on the first option after -n, that's the name. If the second, that's the description.
            if newarg == 2:
                newname = argument
            elif newarg == 1:
                newrules = parserules(argument)
            newarg -= 1
        else:
            if argument == "-f" or argument == "--force":
                # If a "-f" or "--force" parameter is sent, force the cache to be updated even if it doesn't look like it needs to be.
                forceupdate = True
            elif argument[:2] == "-d" or argument[:9] == "--dbpath=":
                # Looks like their db is somewhere other than /var/lib/mpd/mpd.db...
                if argument[:2] == "-d":
                    # Python can't work with ~, which has a reasonable chance of being used (eg: ~/.mpd/mpd.db"), so it needs to be expanded.
                    mpd["db_file"] = os.path.expanduser(argument[2:])
                elif argument[:9] == "--dbpath=":
                    mpd["db_file"] = os.path.expanduser(argument[9:])
            elif argument[:2] == "-c" or argument[:12] == "--cachepath=":
                # Silly person, not keeping their cache where XDG says it should be...
                if argument[:2] == "-c":
                    cachepath = os.path.expanduser(argument[2:])
                elif argument[:12] == "--cachepath=":
                    cachepath = os.path.expanduser(argument[12:])
            elif argument[:2] == "-C" or argument[:11] == "--confpath=":
                # Now any person which this code applies to is just awkward.
                if argument[:2] == "-C":
                    confpath = os.path.expanduser(argument[2:])
                elif argument[:11] == "--confpath=":
                    confpath = os.path.expanduser(argument[11:])
            elif argument[:2] == "-p" or argument[:12] == "--playlists=":
                # Useful for when over a network share
                if argument[:2] == "-p":
                    mpd["playlist_directory"] = os.path.expanduser(argument[2:])
                elif argument[:12] == "--playlists=":
                    mpd["playlist_directory"] = os.path.expanduser(argument[12:])
            elif argument[:2] == "-u" or argument[:10] == "--mpduser=":
                # As is any person to whom this applies...
                if argument[:2] == "-u":
                    mpd["user"] = argument[2:]
                elif argument[:10] == "--mpdpath=":
                    mpd["user"] = argument[10:]
            elif argument == "-n" or argument == "--new":
                # Do special treatment to the next 2 arguments
                newarg = 2
            elif argument == "-s" or argument == "--simple":
                # Ooh, this means that (probably) MPDDP is being used! Yay!
                simpleoutput = True
            elif argument == "-h" or argument == "--help":
                showhelp()
            elif not argument == sys.argv[0]: # The first argument is the filename. Don't complain about not understanding it...
                # Ooh, stderr. I never actually knew how to send stuff through stderr in python.
                print >> sys.stderr, "Unrecognised parameter '" + argument + "'"
                sys.exit(1)
 
# A function to parse a MPD database and make a huge list of tracks
def parsedatabase(database):
    global tracks
    
    i = -1
    parsing = False
 
    for line in database:
        # For every line in the database, remove any whitespace at the beginning and end so the script isn't buggered.
        line = line.strip()
 
        # If entering a songList, start parsing. If exiting one, stop. Fairly self explanatory.
        if not parsing and line == "songList begin":
            parsing = True
        elif parsing and line == "songList end":
            parsing = False
 
        # If we get a line to parse which is not a "songList begin" statement (because it's be stupid to do things with that)
        if parsing and not line == "songList begin":
            if line[0:5] == "key: ":
                i += 1
                # Increment the counter and make an empty dictionary if we hit the beginning of a track
                tracks.append({"key" : "", "file" : "", "Time" : "", "Genre" : "", "Title" : "", "Artist" : "", "Date" : "", "Album" : "", "Track" : "", "mtime" : ""})
 
            # Split the line by the first ": ", the string MPD uses, and stick the second part (the value) in the bit of the dictionary referred to by the first part (the key)
            splitted = line.split(": ", 1)
            tracks[i][splitted[0]] = splitted[1]
 
# Grabbing stuff from the MPD config, a very important step
def parsempdconf():
    global confpath
    global mpd
    
    config = open(confpath, "r")
    # Don't load the user or db_file values if they've already been told to us
    holduser = not mpd["user"] == ""
    holddb = not mpd["db_file"] == ""
    holdplay = not mpd["playlist_directory"] == ""
 
    for line in config:
        line = line.strip()
        if line[:15] == "music_directory":
            rest = line[15:].strip()
            mpd["music_directory"] = rest[1:-1]
        elif line[:18] == "playlist_directory" and not holdplay:
            rest = line[18:].strip()
            mpd["playlist_directory"] = rest[1:-1]
        elif line[:7] == "db_file" and not holddb:
            rest = line[7:].strip()
            mpd["db_file"] = rest[1:-1]
        # The rest of the code in this function wouldn't be needed if I could assume nobody would use "~" in their MPD config...
        elif line[:4] == "user" and not holduser and mpd["user"] == "":
            rest = line[4:].strip()
            mpd["user"] = rest[1:-1]
 
    if mpd["user"] == "":
        mpd["user"] = "root"
 
    homedir = "/home/" + mpd["user"]
    if homedir == "/home/root":
        homedir = "/root"
 
    if "~" in mpd["music_directory"]:
        mpd["music_directory"] = mpd["music_directory"].replace("~", homedir)
    if "~" in mpd["playlist_directory"]:
        mpd["playlist_directory"] = mpd["playlist_directory"].replace("~", homedir)
    if "~" in mpd["db_file"]:
        mpd["db_file"] = mpd["db_file"].replace("~", homedir)
 
def findtracks():
    global tracks
    global newrules
    
    # matchingtracks will hold all tracks which match all of the criteria.
    matchingtracks = []
    
    for track in tracks:
        # Initially assume a track *will* be added.
        addtrack = True
        
        for rule in newrules:
            # For every track, check it with every rule
            if rule["negate"]:
                if not re.search(rule["compiled"], track[rule["type"]]) == None:
                    # If the regular expression matches the track, do not add it to the matchingtracks list.
                    addtrack = False
            else:
                if re.search(rule["compiled"], track[rule["type"]]) == None:
                    # If the regular expression does not match the track, do not add it to the matchingtracks list.
                    addtrack = False
        
        if addtrack:
            # Add the track if appropriate
            matchingtracks.append(track)
 
    return matchingtracks
 
def genplaylist(tracks):
    global mpd
    # Parse a list of track dictionaries into a playlist. Thankfully, m3u is a *very* simple format.
    playlist = ""
    
    for track in tracks:
        playlist += mpd["music_directory"] + "/" + track["file"] + "\n"
 
    return playlist
 
# Save some random gubbage to a file
def savegubbage(data, path):
    if not os.path.isdir(os.path.dirname(path)):
        os.mkdir(os.path.dirname(path))
 
    # Open the file for writing in binary mode
    outfile = open(path, "wb")
    # Send the stuff to the file with the magic of cPickle
    cPickle.dump(data, outfile)
    # Close the file handler. Tidy u[p.
    outfile.close()
 
    # We might be running as someone other than the user, so make the file writable
    os.chmod(path, 438)
 
def loadgubbage(path):
    infile = open(path, "rb")
    data = cPickle.load(infile)
    infile.close()
 
    return data
 
def saveplaylist():
    global newname
    global newrules
    global mpd
    global datapath
    global simpleoutput
    
    matchingtracks = findtracks()
    playlist = genplaylist(matchingtracks)
 
    if simpleoutput:
        for track in matchingtracks:
            print track["file"]
    else:
        print "Saving playlist '" + newname + "'."
        
        # Write the contents of the playlist to the m3u file
        newlist = open(mpd["playlist_directory"] + "/" + newname + ".m3u", "w")
        newlist.write(playlist)
        newlist.close()
        
        # Save as list object. This lets us load them all into a big list nicely.
        savegubbage([newname, newrules], datapath + "/" + newname)
 
# Parse some options!
parseargs()
parsempdconf()
 
# Check that the database is actually there before attempting to do stuff with it.
if not os.path.exists(mpd["db_file"]):
    print >> sys.stderr, "The database file '" + mpd["db_file"] + "' could not be found."
    sys.exit(1)
 
# If the cache file does not exist OR the database has been modified since the cache file has this has the side-effect of being able to touch the cache file to stop it from being updated. Good thing we have the -f option for any accidental touches (or if you copy the cache to a new location).
if not os.path.exists(cachepath) or os.path.getmtime(mpd["db_file"]) > os.path.getmtime(cachepath) or forceupdate:
    if not simpleoutput:
        print "Updating database cache..."
 
    # If the cache directory does not exist, create it. The dirname function just removes the "/mpddb.cache" from the end.
    if not os.path.isdir(os.path.dirname(cachepath)):
        os.mkdir(os.path.dirname(cachepath))
 
    database = open(mpd["db_file"], "r")
 
    # Now, parse that database!
    parsedatabase(database)
    
    # Save the parsed stuff to the cache file and close the database file handler. That's not strictly required, python will clean up when the script ends, but you can't unmount volumes with file handlers pointing to them, so it makes a mess.
    savegubbage(tracks, cachepath)
    
    database.close()
    
    if not simpleoutput:
        # Let's update those playlists!
        playlistfiles = os.listdir(datapath)
        playlists = []
        
        for playlistfile in playlistfiles:
            playlists.append(loadgubbage(datapath + "/" + playlistfile))
            
        # Backup the values first.
        oldnewname = newname
        oldnewrules = newrules
        
        # Now regenerate!
        for playlist in playlists:
            newname = playlist[0]
            newrules = playlist[1]
            saveplaylist()
 
        # And restore.
        newname = oldnewname
        newrules = oldnewrules
else:
    # Oh, goodie, we don't need to go through all that arduous parsing as we have a valid cache file :D
    if not simpleoutput:
        print "Loading database cache..."
    # Open it for reading, load the stuff in the file into the tracks list, close the file handler, and have a party.
    tracks = loadgubbage(cachepath)
    
# See if we're making a new playlist or not
if not newname == "":
    # We are, go go go!
    saveplaylist()

