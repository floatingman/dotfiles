# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
# env:
# TERM env customization.
#
# If this property is not set, alacritty will set it to xterm-256color.
#
# Note that some xterm terminfo databases don't declare support for italics.
# You can verify this by checking for the presence of `smso` and `sitm` in
# `infocmp xterm-256color`.
# TERM: xterm-256color

window:
  opacity: 1
# Window dimensions (changes require restart)
#
# Specified in number of columns/lines, not pixels. If both are zero this
# setting is ignored.
#dimensions:
#columns: 100
#lines: 75
#columns: 0
#lines: 0

# Window padding (changes require restart)
#
# Blank space added around the window in pixels. This padding is not scaled by
# DPI and the specified value is always added at both opposing sides.
# padding:
# x: 6
# y: 6

# Spread additional padding evenly around the terminal content.
#dynamic_padding: false

# Window decorations
#
# Available values:
# - full: borders and title bar
# - none: neither borders nor title bar
# - transparent: title bar, transparent background and title bar buttons
# - buttonless: title bar, transparent background, but no title bar buttons
decorations: full

# Startup Mode (changes require restart)
#
# Values for `startup_mode`:
#   - Windowed
#   - Maximized
#   - Fullscreen
#
# Values for `startup_mode` (macOS only):
#   - SimpleFullscreen
startup_mode: Windowed

# Window title
# title: Alacritty

# Window class (Linux/BSD only):
# class:
# Application instance name
# instance: Alacritty
# General application class
# general: Alacritty

scrolling:
  # maximum number of lines in the scrollback buffer. Specifying '0' will
  # disable scrolling.
  history: 5000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  #multiplier: 3

# Display tabs using this many cells (changes require restart)
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required
# to change the `it` value in terminfo when altering this setting.

# Font configuration (changes require restart)
font:
  normal:
    family: Hack Nerd Font
    style: Regular
  bold:
    family: Hack Nerd Font
    style: Bold
  italic:
    family: Hack Nerd Font
    style: Italic
  bold_italic:
    family: Hack Nerd Font
    style: Bold Italic

  # The `style` can be specified to pick a specific face.
  #style: Regular

  # Bold font face
  #bold:
  # Font family
  #
  # If the bold family is not specified, it will fall back to the
  # value specified for the normal font.
  # family: SauceCodePro Nerd Font
  # family: CodeNewRoman Nerd Font
  # family: RobotoMono Nerd Font
  # family: Hack
  # family: JetBrains Mono
  # family: UbuntuMono Nerd Font
  # family: Monofur Nerd Font
  # family: TerminessTTF Nerd Font
  # family: SauceCodePro Nerd Font

  # The `style` can be specified to pick a specific face.
  # style: Bold

  # Italic font face
  # italic:
  # Font family
  #
  # If the italic family is not specified, it will fall back to the
  # value specified for the normal font.
  # family: SauceCodePro Nerd Font Mono
  # family: CodeNewRoman Nerd Font
  # family: RobotoMono Nerd Font
  # family: Hack
  # family: JetBrains Mono
  # family: UbuntuMono Nerd Font
  # family: Monofuritalic Nerd Font Mono
  # family: TerminessTTF Nerd Font
  # family: SauceCodePro Nerd Font

  # The `style` can be specified to pick a specific face.
  # style: Italic

  # Bold italic font face
  # bold_italic:
  # Font family
  #
  # If the bold italic family is not specified, it will fall back to the
  # value specified for the normal font.
  # family: SauceCodePro Nerd Font Mono
  # family: CodeNewRoman Nerd Font
  # family: RobotoMono Nerd Font
  # family: Hack
  # family: JetBrains Mono
  # family: UbuntuMono Nerd Font
  # family: Monofuritalic Nerd Font Mono
  # family: TerminessTTF Nerd Font
  # family: SauceCodePro Nerd Font

  # The `style` can be specified to pick a specific face.
  # style: Bold Italic

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be
  # thought of as modifying the linespacing, and offset.x as modifying the
  # letter spacing.
  #offset:
  #  x: 0
  #  y: 1

  # Glyph offset determines the locations of the glyphs within their cells
  # with the default being at the bottom. Increase the x offset to move
  # the glyph to the right, increase the y offset to move the glyph
  # upward.
  #glyph_offset:
  #  x: 0
  #  y: 0

# When true, bold text is drawn using the bright variant of colors.
# draw_bold_text_with_bright_colors: true

# Use custom cursor colors. If true, display the cursor in the
# cursor.foreground and cursor.background colors, otherwise invert the
# colors of the cursor.
# custom_cursor_colors: true

colors:
  # COLORSCHEME: solarized_dark.yaml
  # Default colors
  primary:
    # hard contrast: background = '0x1d2021'
    background: '0x002b36'
    foreground: '0x839496'

  # Normal colors
  normal:
    black: '0x073642'
    red: '0xdc322f'
    green: '0x859900'
    yellow: '0xb58900'
    blue: '0x268bd2'
    magenta: '0xd33682'
    cyan: '0x2aa198'
    white: '0xeee8d5'

  # Bright colors
  bright:
    black: '0x002b36'
    red: '0xcb4b16'
    green: '0x586e75'
    yellow: '0x657b83'
    blue: '0x839496'
    magenta: '0x6c71c4'
    cyan: '0x93a1a1'
    white: '0xfdf6e3'
  cursor:
    text: '0xffffff'
    cursor: '0x4d4d4c'

  # Normal colors
  dim:
    black: '0x232323'
    red: '0x74423f'
    green: '0x5e6547'
    yellow: '0x8b7653'
    blue: '0x556b79'
    magenta: '0x6e4962'
    cyan: '0x5c8482'
    white: '0x828282'
  indexed_colors:
    - {index: 16, color: '0xaf3a03'}
    - {index: 17, color: '0xd65d0e'}
    - {index: 18, color: '0xebdbb2'}
    - {index: 19, color: '0xd5c4a1'}
    - {index: 20, color: '0x665c54'}
    - {index: 21, color: '0x3c3836'}

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  - {key: P, mods: Control, action: Paste}
  - {key: Y, mods: Control, action: Copy}
  - {key: Insert, mods: Shift, action: PasteSelection}
  - {key: Key0, mods: Control, action: ResetFontSize}
  - {key: Plus, mods: Control, action: IncreaseFontSize}
  - {key: Equals, mods: Control, action: IncreaseFontSize}
  - {key: Minus, mods: Control, action: DecreaseFontSize}
  # Vi Mode
  - {key: Space, mods: Control, mode: Vi, action: ScrollToBottom}
  - {key: Space, mods: Control, action: ToggleViMode}
  - {key: I, mode: Vi, action: ScrollToBottom}
  - {key: I, mode: Vi, action: ToggleViMode}
  - {key: C, mods: Control, mode: Vi, action: ScrollToBottom}
  - {key: C, mods: Control, mode: Vi, action: ToggleViMode}
  - {key: Escape, mode: Vi, action: ClearSelection}
  - {key: Y, mods: Control, mode: Vi, action: ScrollLineUp}
  - {key: E, mods: Control, mode: Vi, action: ScrollLineDown}
  - {key: G, mode: Vi, action: ScrollToTop}
  - {key: G, mods: Shift, mode: Vi, action: ScrollToBottom}
  - {key: B, mods: Control, mode: Vi, action: ScrollPageUp}
  - {key: F, mods: Control, mode: Vi, action: ScrollPageDown}
  - {key: U, mods: Control, mode: Vi, action: ScrollHalfPageUp}
  - {key: D, mods: Control, mode: Vi, action: ScrollHalfPageDown}
  - {key: Y, mode: Vi, action: Copy}
  - {key: Y, mode: Vi, action: ClearSelection}
  - {key: V, mode: Vi, action: ToggleNormalSelection}
  - {key: V, mods: Shift, mode: Vi, action: ToggleLineSelection}
  - {key: V, mods: Control, mode: Vi, action: ToggleBlockSelection}
  - {key: V, mods: Alt, mode: Vi, action: ToggleSemanticSelection}
  - {key: Return, mode: Vi, action: Open}
  - {key: K, mode: Vi, action: Up}
  - {key: J, mode: Vi, action: Down}
  - {key: H, mode: Vi, action: Left}
  - {key: L, mode: Vi, action: Right}
  - {key: Up, mode: Vi, action: Up}
  - {key: Down, mode: Vi, action: Down}
  - {key: Left, mode: Vi, action: Left}
  - {key: Right, mode: Vi, action: Right}
  - {key: Key0, mode: Vi, action: First}
  - {key: Key4, mode: Vi, action: Last}
  - {key: Key6, mods: Shift, mode: Vi, action: FirstOccupied}
  - {key: H, mods: Shift, mode: Vi, action: High}
  - {key: M, mods: Shift, mode: Vi, action: Middle}
  - {key: L, mods: Shift, mode: Vi, action: Low}
  - {key: B, mode: Vi, action: SemanticLeft}
  - {key: W, mode: Vi, action: SemanticRight}
  - {key: E, mode: Vi, action: SemanticRightEnd}
  - {key: B, mods: Shift, mode: Vi, action: WordLeft}
  - {key: W, mods: Shift, mode: Vi, action: WordRight}
  - {key: E, mods: Shift, mode: Vi, action: WordRightEnd}
  - {key: Key5, mods: Shift, mode: Vi, action: Bracket}
  - {key: Slash, mode: Vi, action: SearchForward}
  - {key: Slash, mods: Shift, mode: Vi, action: SearchBackward}
  - {key: N, mode: Vi, action: SearchNext}
  - {key: N, mods: Shift, mode: Vi, action: SearchPrevious}

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: {threshold: 300}
  triple_click: {threshold: 300}

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  # URL launcher
  # url:
  # This program is executed when clicking on a text which is recognized as a URL.
  # The URL is always added to the command as the last parameter.
  #
  # When set to `None`, URL launching will be disabled completely.
  #
  # Default:
  #   - (macOS) open
  #   - (Linux) xdg-open
  #   - (Windows) explorer
  # launcher:
  #   program: xdg-open
  #   args: []

  # These are the modifiers that need to be held down for opening URLs when clicking
  # on them. The available modifiers are documented in the key binding section.
  # modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - {mouse: Middle, action: PasteSelection}

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# dynamic_title: false

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
shell:
  program: /usr/bin/zsh
  args:
    - --login

debug:
  # Should display the render timer
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - OFF
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false
# vim: nospell
